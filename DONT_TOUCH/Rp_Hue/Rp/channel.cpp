#include <iostream>
#include <random>
#include "parameters.h"
using namespace std;

random_device seed;
mt19937 generator(seed());
normal_distribution<double> normal(0, 1);

void Channel(double stdDev, int *tx, double *rx)
{
	for (int i = 0; i < MAX_CODE_LEN; i++)
	{
		rx[i] = 1 - (2 * tx[i]) + stdDev * normal(generator);
	}
}

double Capacity(double variance)
{
	double cap1[300] = { 1.0000,0.9968,0.9802,0.9504,0.9128,0.8724,0.8320,0.7929,0.7561,0.7214,
						 0.6893,0.6597,0.6318,0.6060,0.5825,0.5603,0.5398,0.5207,0.5027,0.4859,
						 0.4703,0.4554,0.4415,0.4286,0.4162,0.4044,0.3936,0.3831,0.3734,0.3640,
						 0.3549,0.3464,0.3381,0.3305,0.3230,0.3161,0.3090,0.3026,0.2964,0.2905,
						 0.2847,0.2791,0.2739,0.2687,0.2640,0.2592,0.2545,0.2501,0.2458,0.2418,
						 0.2377,0.2340,0.2301,0.2264,0.2230,0.2196,0.2162,0.2130,0.2100,0.2070,
						 0.2040,0.2012,0.1984,0.1959,0.1930,0.1905,0.1881,0.1855,0.1832,0.1810,
						 0.1787,0.1765,0.1744,0.1724,0.1703,0.1682,0.1663,0.1645,0.1626,0.1608,
						 0.1588,0.1572,0.1554,0.1539,0.1523,0.1506,0.1491,0.1475,0.1461,0.1446,
						 0.1432,0.1417,0.1404,0.1390,0.1378,0.1364,0.1351,0.1339,0.1325,0.1314,
						 0.1302,0.1293,0.1279,0.1268,0.1256,0.1245,0.1236,0.1225,0.1214,0.1203,
						 0.1194,0.1185,0.1175,0.1165,0.1156,0.1147,0.1137,0.1130,0.1120,0.1111,
						 0.1103,0.1094,0.1087,0.1079,0.1071,0.1063,0.1054,0.1047,0.1039,0.1031,
						 0.1024,0.1017,0.1010,0.1004,0.0996,0.0990,0.0982,0.0976,0.0968,0.0963,
						 0.0956,0.0951,0.0944,0.0937,0.0932,0.0926,0.0921,0.0914,0.0909,0.0902,
						 0.0896,0.0891,0.0886,0.0880,0.0876,0.0870,0.0865,0.0859,0.0854,0.0849,
						 0.0845,0.0839,0.0834,0.0830,0.0825,0.0822,0.0815,0.0811,0.0807,0.0802,
						 0.0798,0.0794,0.0789,0.0784,0.0781,0.0776,0.0771,0.0768,0.0765,0.0759,
						 0.0756,0.0751,0.0748,0.0744,0.0740,0.0736,0.0732,0.0729,0.0725,0.0722,
						 0.0718,0.0714,0.0712,0.0708,0.0704,0.0700,0.0698,0.0694,0.0691,0.0687,
						 0.0684,0.0680,0.0678,0.0675,0.0671,0.0668,0.0664,0.0662,0.0659,0.0655,
						 0.0653,0.0650,0.0648,0.0644,0.0641,0.0639,0.0636,0.0633,0.0630,0.0628,
						 0.0623,0.0622,0.0620,0.0618,0.0614,0.0612,0.0608,0.0606,0.0604,0.0601,
						 0.0599,0.0597,0.0594,0.0591,0.0590,0.0587,0.0585,0.0582,0.0580,0.0577,
						 0.0574,0.0572,0.0570,0.0568,0.0565,0.0564,0.0561,0.0560,0.0557,0.0554,
						 0.0554,0.0551,0.0548,0.0547,0.0545,0.0543,0.0541,0.0538,0.0537,0.0534,
						 0.0532,0.0530,0.0529,0.0526,0.0524,0.0523,0.0521,0.0518,0.0517,0.0516,
						 0.0513,0.0512,0.0510,0.0508,0.0506,0.0505,0.0502,0.0502,0.0499,0.0498,
						 0.0495,0.0495,0.0492,0.0492,0.0490,0.0488,0.0486,0.0485,0.0483,0.0481,
						 0.0480,0.0477,0.0476,0.0474,0.0473,0.0472,0.0470,0.0468,0.0468,0.0466 };
	double cap2[100] = { 0.0458,0.0451,0.0444,0.0437,0.0431,0.0425,0.0419,0.0413,0.0407,0.0401,
						 0.0395,0.0390,0.0385,0.0380,0.0375,0.0370,0.0365,0.0361,0.0356,0.0352,
						 0.0347,0.0344,0.0340,0.0336,0.0333,0.0328,0.0324,0.0320,0.0317,0.0314,
						 0.0310,0.0307,0.0304,0.0301,0.0297,0.0294,0.0291,0.0289,0.0286,0.0283,
						 0.0280,0.0277,0.0275,0.0272,0.0271,0.0268,0.0265,0.0262,0.0260,0.0257,
						 0.0255,0.0253,0.0251,0.0249,0.0247,0.0244,0.0243,0.0241,0.0239,0.0236,
						 0.0235,0.0232,0.0231,0.0229,0.0227,0.0225,0.0223,0.0222,0.0220,0.0219,
						 0.0217,0.0215,0.0214,0.0212,0.0211,0.0210,0.0207,0.0206,0.0204,0.0203,
						 0.0202,0.0200,0.0199,0.0198,0.0196,0.0194,0.0194,0.0192,0.0191,0.0190,
						 0.0188,0.0187,0.0186,0.0185,0.0184,0.0182,0.0182,0.0181,0.0179,0.0178 };
	double cap3[60] = {  0.0174,0.0169,0.0166,0.0162,0.0159,0.0155,0.0152,0.0149,0.0146,0.0143,
						 0.0140,0.0137,0.0135,0.0132,0.0130,0.0128,0.0125,0.0123,0.0121,0.0120,
						 0.0117,0.0115,0.0114,0.0112,0.0110,0.0109,0.0107,0.0105,0.0104,0.0102,
						 0.0101,0.0100,0.0098,0.0097,0.0096,0.0094,0.0093,0.0092,0.0090,0.0090,
						 0.0088,0.0088,0.0086,0.0085,0.0084,0.0084,0.0082,0.0081,0.0081,0.0080,
						 0.0079,0.0078,0.0077,0.0076,0.0076,0.0075,0.0074,0.0073,0.0073,0.0072 };
	if (variance <= 15)
	{
		int index = (int)floor(variance / 0.05) - 1;
		double ratio = (variance - (index + 1)*0.05) / 0.05;
		if (index < 0) return cap1[1];
		else if (ratio == 0) return cap1[index];
		else return ratio * (cap1[index + 1] - cap1[index]) + cap1[index];
	}
	else if (variance <= 40)
	{
		int index = (int)floor((variance - 15) / 0.25) - 1;
		double ratio = (variance - 15 - (index + 1)*0.25) / 0.25;
		if (index < 0) return ratio * (cap2[0] - cap1[299]) + cap1[299];
		else if (ratio == 0) return cap2[index];
		else return ratio * (cap2[index + 1] - cap2[index]) + cap2[index];
	}
	else if (variance <= 100)
	{
		int index = (int)floor(variance - 40) - 1;
		double ratio = variance - 40 - (index + 1);
		if (index < 0) return ratio * (cap3[0] - cap2[99]) + cap2[99];
		else if (ratio == 0) return cap3[index];
		else return ratio * (cap3[index + 1] - cap3[index]) + cap3[index];
	}
	else return 0;
}